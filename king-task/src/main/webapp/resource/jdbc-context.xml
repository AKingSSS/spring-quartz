<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/tx 
			http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-3.0.xsd
	   		">

	<!--<context:property-placeholder location="classpath:jdbc.properties" />-->
	<!-- Enable annotation style of managing transactions -->

	<!-- p:jdbcUrl="jdbc:mysql://192.168.193.52:3306/yilucaifu" p:user="root" -->
	<!-- p:password="7ujm8ik," p:acquireIncrement="10" -->
	<!-- p:jdbcUrl="jdbc:mysql://localhost:3306/yilucaifu_test?useUnicode=true&amp;characterEncoding=utf-8" -->
	<!-- p:user="root" p:password="root" -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- Declare a datasource that has pooling capabilities -->
	<!--生产环境-->
	<!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"-->
		  <!--destroy-method="close" p:driverClass="com.mysql.jdbc.Driver"-->
		  <!--p:jdbcUrl="jdbc:mysql://192.168.193.52:3306/yilucaifu_org" p:user="root"-->
		  <!--p:password="7ujm8ik," p:idleConnectionTestPeriod="60" p:maxPoolSize="100"-->
		  <!--p:maxStatements="50" p:minPoolSize="10" />-->
	<!--测试环境-->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close" p:driverClass="com.mysql.jdbc.Driver"
		p:jdbcUrl="jdbc:mysql://localhost:3306/king?useUnicode=true&amp;characterEncoding=UTF-8" p:user="root"
		p:password="123" p:idleConnectionTestPeriod="60" p:maxPoolSize="100"
		p:maxStatements="50" p:minPoolSize="10" />
	<!-- Declare a transaction manager -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />
	<!-- define the SqlSessionFactory, notice that configLocati on is not needed
		when you use MapperFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- scan for mappers and let them be autowired -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.king.persistence" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>

	<!-- 定义拦截器，用来指定事物属性，级别，和异常处理 -->
	<bean id="transactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager"></property>
		<property name="transactionAttributes">
			<props>
				<!-- PROPAGATION_SUPPORTS: 如果已经存在事务,则加入事务;如果没有事务,则以非事务的方式执行; PROPAGATION_MANDATORY:
					使用当前事务, 如果没有, 则抛出异常; PROPAGATION_REQUIRED: 新建事务,如果当前有事务, 则挂起; P ROPAGATION_NOT_SUPPORTED:以非事务的方式执行,
					如果当前有事务, 则挂起; PROPAGATION_NEVER:以非事务的方式执行, 如果当前有事务,则抛出异常; +/-Exception</prop>
					+ 表示异常出现时事物提交 - 表示异常出现时事务回滚 -->
				<prop key="get*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="find*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="del*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="update*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="set*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="create*">PROPAGATION_REQUIRED,-Exception</prop>
			</props>
		</property>
	</bean>
</beans>